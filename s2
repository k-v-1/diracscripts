#!/bin/bash
#
## version 4.1: (cleaned-up version)
export LC_ALL=C
checkchk=True
if [ $#  -eq 0 ] 
then
   echo "Number of parameters supplied insufficient"
   echo "Syntax : $0 input-file [queue-name]"
   echo "When no queue is given, Koen's qsmk2.sh script is used to get first free queue."
   echo "chk-file is automatically determined from input"
   exit 0
fi

####
#code snippet to find directory of this script.
SOURCE=${BASH_SOURCE[0]}
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
#end
####


indir=`pwd`
queue=$2
inputfile=$1
[[ ! -e $inputfile ]] && echo "File not found: $inputfile" && exit 1
workdir=/temp0/`whoami`

name=${inputfile%.com}
name=`echo ${name%.gjf} | cut -c1-15`
inbase=${inputfile##*/}
inbase=${inbase%.com}
logname=${inputfile%.com}
logname=${logname%.gjf}.log

if [ "x" = "x$queue" ]; then                                              
    #checking location of qsmk2.sh
    qsmk_script="$DIR/qsmk2.sh"
    if [[ ! -x $qsmk_script ]]; then
        #backup if first one is not found in git-folder
        qsmk2_script="/home/koen/.scrpts/qsmk2.sh"
        [[ ! -x $qsmk_script ]] && echo "no qsmk-script found, no automatic node-selection" && exit 1
    fi
    queue=`$qsmk2_script | grep "Free" | awk '{print $2}'`
fi                                                                        
echo $queue                                                             

#check input on presence of chks: TODO this can be written more readable/efficient
#%oldchk
chkold=""
if grep -Fq "%oldchk=" $inputfile; then
if ! grep -Fq "%oldchk=/" $inputfile; then
  chkold_prep=`grep "%oldchk=" $inputfile | cut -c9-`
  chkold="$(echo -e "${chkold_prep}" | sed -e 's/[[:space:]]*$//')"
  if [[ $chkold != *".chk" ]]; then
    chkold="${chkold}.chk"
  fi
else
chkold=`grep "%oldchk=" $inputfile | cut -c9-`
fi
fi

#%chk
chknew=""
if grep -Fq "%chk=" $inputfile; then
if ! grep -Fq "%chk=/" $inputfile; then
  chknew_prep=`grep "%chk=" $inputfile |tail -n1| cut -c6-`
  chknew="$(echo -e "${chknew_prep}" | sed -e 's/[[:space:]]*$//')"
  if [[ $chknew != *".chk" ]]; then
    chknew="${chknew}.chk"
  fi
else
chknew=`grep "%chk=" $inputfile |tail -n1| cut -c6-`
fi
fi
#This part is for copying extra chk-files
xchks=($(grep -E "[0-9A-z_.-]+[.]chk" $inputfile | tr "\n" " "))
xchks=($(grep -iwE "[0-9A-z_.-]+[.]chk" $inputfile | sed -E 's/^.*=([0-9A-z_.-]+[.]chk)/\1/; s/[[:space:]]*$//' | sort | uniq | tr "\n" " "))
#check input on presence of .cube
if grep -q "\.cube" $inputfile; then
  cubcub=`grep "\.cube" $inputfile`
fi
#check input on presence of .wfn
if grep -q "\.wfn" $inputfile; then
  cubcub=`grep "\.wfn" $inputfile`
fi

yesno () {
# give string as $1
while true; do
    read -p "$1" yn
    case $yn in 
        [Yy]* ) break;;
        [Nn]* ) exit 0;;
        * ) echo "please answer y or n...";;
    esac
done
}

if [[ "$checkchk" == "True" && "x$chknew" != "x" ]]; then
if [[ "${logname%.log}" != "${chknew%.chk}" || "${inbase%.gjf}" != "${chknew%.chk}" ]]; then
    yesno "filename not equal to chk-name! Do you wish to continue?"
fi; fi
#if grep -iFq " tda" $inputfile; then
#if grep -iFq " freq" $inputfile; then
#if grep -iFq " opt" $inputfile; then
#    yesno "Opt + Freq + tda (probably?) won't work for ESs, continue?"
#fi; fi; fi


VERSION="A03"

#Check the input file
/usr/local/scripts/check_gaussian_input $inputfile $queue $workdir
if [ $? -ne  0 ]; then
exit 1; fi

GAUSS_SCRDIR=$workdir
cat <<END >$inputfile.job
#!/bin/bash
if [ ! -d $GAUSS_SCRDIR ]
then
mkdir -p $GAUSS_SCRDIR
fi
cd $GAUSS_SCRDIR

export GAUSS_SCRDIR=$GAUSS_SCRDIR
export g16root=/usr/local/chem/g16$VERSION
. \$g16root/bsd/g16.profile
touch $indir/$logname
rm -f $GAUSS_SCRDIR/*.rwf
END

#[[ "x" != "x$chkold" ]] && echo "cp $indir/$chkold ." >> $inputfile.job
for chk in ${xchks[@]}; do  # this already captures chkold
    [[ "x" != "x$chk" ]] && [[ "x$chk" != "x$chknew" ]] && echo "cp $indir/$chk ." >> $inputfile.job
done

cat <<END >> $inputfile.job
/usr/local/scripts/edit_for_nproc $indir/$inputfile > $workdir/$inputfile
tr -d '\r' < $inputfile > $inputfile.tmp
mv $inputfile.tmp $inputfile
g16_FrontEnd $inputfile $indir/$logname
rm -f $GAUSS_SCRDIR/Gau-*
rm -f $GAUSS_SCRDIR/*.rwf
END

[[ "x" != "x$chkold" ]] && echo "rsync -au $chkold $indir" >> $inputfile.job
[[ "x" != "x$chknew" ]] && echo "rsync -au $chknew $indir" >> $inputfile.job
[[ "x" != "x$cubcub" ]] && echo "cp $cubcub $indir" >> $inputfile.job

qsub -q $queue -e $indir/${inputfile}-batch.log -j eo $inputfile.job -N $name
#rm $2.job

