#!/bin/bash
###!/bin/bash
#
## version 2.1 (after v3.0)
#todo, works in both bash and zsh?
if [ $#  -eq 0 ] 
then
   echo "Number of parameters supplied insufficient"
   echo "Syntax : $0 input-file [queue-name]"
   echo "When no queue is given, Koen's qsmk2.sh script is used to get first free queue."
   echo "chk-file is automatically determined from input"
#   return
   exit 0
fi

indir=`pwd`
queue=$2
inputfile=$1
[[ -e $inputfile ]] || exit 0
workdir=/temp0/`whoami`
#chkfile=$3

name=`echo ${inputfile%.gjf} | cut -c1-15`
if [ "x" = "x$queue" ]; then                                              
  # queue=`qsum -u | grep -A1 "free" | tail -n1 | awk '{print $1;}'`      
  queue=`/home/koen/.scrpts/qsmk2.sh | grep "Free" | awk '{print $2}'`
fi                                                                        
echo $queue                                                             

#Koen's part
#check input on presence of %chk
chkold=""
if grep -Fq "%oldchk=" $inputfile; then
if ! grep -Fq "%oldchk=/" $inputfile; then
  chkold_prep=`grep "%oldchk=" $inputfile | cut -c9-`
  chkold="$(echo -e "${chkold_prep}" | sed -e 's/[[:space:]]*$//')"
  if [[ $chkold != *".chk" ]]; then
    chkold="${chkold}.chk"
  fi
else
chkold=`grep "%oldchk=" $inputfile | cut -c9-`
fi
fi

chknew=""
if grep -Fq "%chk=" $inputfile; then
if ! grep -Fq "%chk=/" $inputfile; then
  chknew_prep=`grep "%chk=" $inputfile |tail -n1| cut -c6-`
  chknew="$(echo -e "${chknew_prep}" | sed -e 's/[[:space:]]*$//')"
  if [[ $chknew != *".chk" ]]; then
    chknew="${chknew}.chk"
  fi
else
chknew=`grep "%chk=" $inputfile |tail -n1| cut -c6-`
fi
fi
#This part is for copying extra chk-files
xchks=($(grep -E "^[a-Z0-9_.-]+[.]chk" $inputfile | tr "\n" " "))
#check input on presence of .cube
if grep -q "\.cube" $inputfile; then
  cubcub=`grep "\.cube" $inputfile`
fi
#check input on presence of .wfn
if grep -q "\.wfn" $inputfile; then
  cubcub=`grep "\.wfn" $inputfile`
fi

yesno () {
# give string as $1
while true; do
    if [[ -n "$BASH_VERSION" ]]; then
        read -p "$1" yn
    elif [[ -n "$ZSH_VERSION" ]]; then
        read "$1" 
    else
        echo "no bash or zsh?" && exit 0
    fi
    case $yn in 
        [Yy]* ) break;;
        [Nn]* ) exit 0;;
        * ) echo "please answer y or n...";;
    esac
done
}

inbase=${inputfile##*/}
if [[ "x$chknew" != "x" && ${inbase%.gjf} != ${chknew%.chk} ]]; then
    yesno "filename not equal to chk-name! Do you wish to continue?"
fi
if grep -iFq " tda" $inputfile; then
if grep -iFq " freq" $inputfile; then
if grep -iFq " opt" $inputfile; then
    yesno "Opt + Freq + tda (probably?) won't work for ESs, continue?"
fi
fi
fi

# set version

#VERSION=${0#*subg16}
#if [ x$VERSION = x ]
#then
VERSION="A03"
#fi

#Check the input file

# $g98root/bsd/check_input $2 $1 $3
/usr/local/scripts/check_gaussian_input $inputfile $queue $workdir
if [ $? -ne  0 ]; then
exit 1; fi

GAUSS_SCRDIR=$workdir
cat <<END >$inputfile.job
#!/bin/ksh
if [ ! -d $GAUSS_SCRDIR ]
then
mkdir -p $GAUSS_SCRDIR
fi
cd $GAUSS_SCRDIR
GAUSS_SCRDIR=$GAUSS_SCRDIR
export GAUSS_SCRDIR 
export g16root=/usr/local/chem/g16$VERSION
. \$g16root/bsd/g16.profile
touch $indir/${inputfile%.gjf}.log
rm -f $GAUSS_SCRDIR/*.rwf
END

if [ "x" != "x$chkold" ]; then
    echo "cp $indir/$chkold ." >> $inputfile.job; fi
for chk in ${xchks[@]}; do
    if [ "x" != "x$chk" ]; then
        echo "cp $indir/$chk ." >> $inputfile.job; fi
done

cat <<END >> $inputfile.job
/usr/local/scripts/edit_for_nproc $indir/$inputfile > $workdir/$inputfile
tr -d '\r' < $inputfile > $inputfile.tmp
mv $inputfile.tmp $inputfile
g16_FrontEnd $inputfile $indir/${inputfile%.gjf}.log
rm -f $GAUSS_SCRDIR/Gau-*
rm -f $GAUSS_SCRDIR/*.rwf
END

if [ "x" != "x$chkold" ]; then
    echo "rsync -au $chkold $indir" >> $inputfile.job; fi
if [ "x" != "x$chknew" ]; then
    echo "rsync -au $chknew $indir" >> $inputfile.job; fi
if [ "x" != "x$cubcub" ]; then
    echo "cp $cubcub $indir" >> $inputfile.job; fi

qsub -q $queue -e $indir/${inputfile}-batch.log -j eo $inputfile.job -N $name
#rm $2.job

